openapi: 3.0.0
paths:
  '/images/presigned-url/{objectKey}':
    get:
      tags:
        - Image
      summary: 'Get AWS S3 presigned URL'
      description: 'Generates a presigned URL for directly accessing an image from AWS S3 without needing AWS credentials.'
      operationId: getPresignedUrl
      parameters:
        -
          name: objectKey
          in: path
          description: 'The S3 object key for the image'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Presigned URL returned successfully'
          content:
            application/json:
              schema:
                type: string
              example: 'https://examplebucket.s3.amazonaws.com/example.jpg?AWSAccessKeyId=...'
        '500':
          description: 'Error generating presigned URL'
          content:
            application/json:
              schema:
                type: string
              example: 'Error generating presigned URL'
  /api/images:
    get:
      tags:
        - Image
      summary: 'List images'
      description: 'Retrieves a list of images that are marked to be shown on the homepage.'
      operationId: listImages
      responses:
        '200':
          description: 'List of images'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: { type: App\Entity\Image, groups: null, options: null, serializationContext: [] }
  /images/upload:
    post:
      tags:
        - Image
      summary: 'Upload Image'
      description: 'Uploads an image to AWS S3 and stores its metadata in the database.'
      operationId: uploadImage
      requestBody:
        description: 'Image file and metadata to upload'
        required: true
        content:
          application/json:
            schema:
              required:
                - image
                - description
                - type
                - showOnHomePage
              properties:
                image:
                  description: 'The image file to upload'
                  type: string
                  format: binary
                description:
                  description: 'Description of the image'
                  type: string
                type:
                  description: 'Type of the image (gallery or profile)'
                  type: string
                showOnHomePage:
                  description: 'Flag to indicate if the image should be shown on the homepage'
                  type: boolean
              type: object
      responses:
        '201':
          description: 'Image uploaded successfully'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Image uploaded successfully' }
                  data: { properties: { id: { type: integer, example: 123 }, filename: { type: string, example: example.jpg }, url: { type: string, example: 'https://examplebucket.s3.amazonaws.com/example.jpg' }, description: { type: string, example: 'A description of the image' }, type: { type: string, example: gallery }, showOnHomepage: { type: boolean, example: true } }, type: object }
                type: object
        '400':
          description: 'Invalid file upload'
          content:
            application/json:
              schema:
                type: string
              example: 'Invalid file upload'
        '500':
          description: 'Error processing the image'
          content:
            application/json:
              schema:
                type: string
              example: 'Error processing the image'
  /api/user:
    post:
      tags:
        - User
      summary: 'Create a new user'
      description: 'Registers a new user with username, email, and password.'
      operationId: createUser
      requestBody:
        description: 'User data'
        required: true
        content:
          application/json:
            schema:
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              type: object
      responses:
        '201':
          description: 'User created successfully'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  userId: { type: integer }
                type: object
        '400':
          description: 'Invalid input data'
          content:
            application/json:
              schema:
                properties:
                  errors: { type: array, items: { type: string } }
                type: object
      security:
        -
          bearerAuth: []
  '/api/user/{id}':
    delete:
      tags:
        - User
      summary: 'Delete a user'
      description: 'Deletes a single user based on the user ID.'
      operationId: deleteUser
      parameters:
        -
          name: id
          in: path
          description: 'ID of the user to delete'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'User successfully deleted'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'User successfully deleted' }
                type: object
        '400':
          description: 'User not found'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'User was not found.' }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Authentication credentials were missing or incorrect.' }
                type: object
      security:
        -
          bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      bearerFormat: JWT
      scheme: bearer
